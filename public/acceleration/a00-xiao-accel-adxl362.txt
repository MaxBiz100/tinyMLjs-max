/*
 * webSerial for testing javascript connection with an arduino
 * 
 * Latest work at   https://github.com/hpssjellis/webMLserial
 * 
 * Note: On the Arduino Serial monitor make sure no line-ending or if statements will not work
 * 
 * Android https://hpssjellis.github.io/web-serial-polyfill/index.html
 * Laptops Desktops  https://hpssjellis.github.io/my-examples-of-arduino-webUSB-webSerial/public/index.html
 * IOS     not really sure
 * 
 */



#include <Arduino.h> // Only needed for https://platformio.org/
//#include <Arduino_LSM9DS1.h>  //for Nano33BleSense

#include <ADXL362.h>  // ADXL362 accelerometer


#define FREQUENCY_HZ        25     // how many samples per second 
#define COLLECTION_SECONDS  2     // how many seconds to collect samples
#define INTERVAL_MS  (1000 / (FREQUENCY_HZ + 1)) // need for the timer 
#define CONVERT_G_TO_MS2    9.80665f   // accleration conversion

int myMaxData = FREQUENCY_HZ * COLLECTION_SECONDS;
int myCount = 0;
int myDelay = INTERVAL_MS;   // non-block delay in milliseconds
unsigned long myStart; 

String readString;
bool mySendData = true;

// define accel variable
ADXL362 xl;


void setup() {
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);   // onboard LED, HIGH = off
  //while (!Serial) {}                 // do nothing and wait
  
  myStart = millis();   // set delay
  randomSeed(analogRead(A0));  // AO pin on XIAO does not have to be connected to anything
  Serial.println("accX,accY,accZ");  // CSV file heading titles
 
  xl.begin(D7);                   // Setup SPI protocol, issue device soft reset
  xl.beginMeasure();              // Switch ADXL362 to measure mode  
  
//  if (!IMU.begin()) {
//     Serial.println("Failed to initialize IMU!");
//     while (1);
//  }


}

void loop() {
  float x, y, z, temp;
  int16_t XValue, YValue, ZValue, Temperature;
  if ( (millis() - myStart ) >= myDelay) {       
     myStart = millis();      //  reset the delay time
     myCount += 1;
    //IMU.readAcceleration(x, y, z);  
     xl.readXYZTData(XValue, YValue, ZValue, Temperature);  
     // convert raw acceleration to acceleration due to gravity
     // convert integers to floats with the decimal place correct
     x = XValue / 100.0;
     y = YValue / 100.0;
     z = ZValue / 100.0;
     //Serial.println( String(myStart)+ "," + String(analogRead(A0)) + "," + String(analogRead(A1)) + "," +  String(analogRead(A2))  );
     if (myCount >= myMaxData){
        mySendData = false;   // stop sending data when amount reached
     }
     if (mySendData){
        Serial.println( String(x,3) + "," + String(y,3) + "," +  String(z,3)  );
      //  Serial.println( String(x) + "," + String(y) + "," +  String(z)  );
     } 
   }

   while (Serial.available()) {
    delay(3);  
    char myChar = Serial.read();
    readString += myChar; 
  }

  if (readString.length() > 0) {
    readString.trim();  // get rid of last weird character
    if (readString == "a"){
      digitalWrite(LED_BUILTIN, LOW); //onboard LED LOW = on
    }
    if (readString == "b"){
      digitalWrite(LED_BUILTIN, HIGH);
    }
    if (readString == "start"){
      mySendData = true;
      myStart = millis();      //  reset the delay time
      myCount = 0;
    }
    if (readString == "stop"){
      mySendData = false;
      Serial.println("Stopping at count: "+ String(myCount));  // CSV file heading titles
    }
    if (readString == "firstline"){
      Serial.println("accX,accY,accZ");  // CSV file heading titles
    }
    readString="";
  } 
  
}




/*

  #include <ADXL362.h>

ADXL362 xl;

int16_t temp;
int16_t XValue, YValue, ZValue, Temperature;

void setup(){
  
  Serial.begin(115200);
  xl.begin(D7);                   // Setup SPI protocol, issue device soft reset
  xl.beginMeasure();              // Switch ADXL362 to measure mode  
  
  Serial.println("Start Demo: Simple Read");
}

void loop(){
    
  // read all three axis in burst to ensure all measurements correspond to same sample time
  xl.readXYZTData(XValue, YValue, ZValue, Temperature);  
  Serial.println("m/s^2 --> x: " + String(XValue * 0.0098, 3) + "\t, y: "  + String(YValue * 0.0098, 3) + "\t, z: " + String(ZValue * 0.0098, 3) );
  
  delay(500);                // Arbitrary delay to make serial monitor easier to observe
}

*/
